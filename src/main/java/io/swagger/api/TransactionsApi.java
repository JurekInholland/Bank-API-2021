/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CreateTransaction;
import io.swagger.model.ModifyTransaction;
import io.swagger.model.Transaction;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-05-20T15:39:24.948Z[GMT]")
@Validated
public interface TransactionsApi {

    @Operation(summary = "Create a transaction", description = "creating a transaction", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "employees", "customers" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Transaction created successfully", content = @Content(schema = @Schema(implementation = Transaction.class))),

            @ApiResponse(responseCode = "400", description = "Invalid request, transaction not created") })
    @RequestMapping(value = "/transactions",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Transaction> createTransaction(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CreateTransaction body);


    @Operation(summary = "List transactions", description = "getting a list of transactions", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "employees", "customers" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "A JSON array of transactions", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Transaction.class)))),

            @ApiResponse(responseCode = "400", description = "could not retrieve transactions") })
    @RequestMapping(value = "/transactions",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<Transaction>> getTransactions(@Parameter(in = ParameterIn.QUERY, description = "The number of items to skip before starting to collect the result set" ,schema=@Schema()) @Valid @RequestParam(value = "offset", required = false) Integer offset, @Parameter(in = ParameterIn.QUERY, description = "The numbers of items to return" ,schema=@Schema()) @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @Operation(summary = "Update a transaction", description = "Update a single transaction via transactionId", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "employees" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successfully updated transaction", content = @Content(schema = @Schema(implementation = Transaction.class))),

            @ApiResponse(responseCode = "400", description = "updating transaction failed") })
    @RequestMapping(value = "/transactions/{transactionId}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Transaction> transactionId(@Parameter(in = ParameterIn.PATH, description = "The transactionId of the transaction", required=true, schema=@Schema()) @PathVariable("transactionId") Integer transactionId, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ModifyTransaction body);


    @Operation(summary = "Delete a transaction", description = "Delete a single transaction via transactionId", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "employees" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "successfully deleted transaction"),

            @ApiResponse(responseCode = "400", description = "deleting transaction has failed") })
    @RequestMapping(value = "/transactions/{transactionId}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> transactionsTransactionIdDelete(@Parameter(in = ParameterIn.PATH, description = "The transactionId of the transaction", required=true, schema=@Schema()) @PathVariable("transactionId") Integer transactionId);


    @Operation(summary = "Get a specific transaction", description = "get a specific transaction | User access; Customer (can only get their own transactions) & Employee", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "employees", "customers" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "A json transaction object", content = @Content(schema = @Schema(implementation = Transaction.class))),

            @ApiResponse(responseCode = "400", description = "transcation was not found") })
    @RequestMapping(value = "/transactions/{transactionId}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Transaction> transactionsTransactionIdGet(@Parameter(in = ParameterIn.PATH, description = "The transactionId of the transaction", required=true, schema=@Schema()) @PathVariable("transactionId") Integer transactionId);

}

