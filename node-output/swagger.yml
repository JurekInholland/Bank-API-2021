{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "Bank API Project",
    "description" : "This is a banking API which handles users, transactions and accounts",
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version" : "1.0.0"
  },
  "servers" : [ {
    "url" : "https://virtserver.swaggerhub.com/project-group/bank-api-2021/1.0.0",
    "description" : "Bank API Project"
  }, {
    "url" : "https://petstore.swagger.io/v2"
  } ],
  "security" : [ {
    "bearerAuth" : [ ]
  } ],
  "paths" : {
    "/login" : {
      "post" : {
        "tags" : [ "auth" ],
        "summary" : "Login a user",
        "description" : "User logins with an email and password",
        "operationId" : "loginUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/body"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "You have successfully logged in",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "400" : {
            "description" : "Incorrect email/password"
          }
        },
        "security" : [ ]
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "employees", "customers" ],
        "summary" : "get users",
        "description" : "getting a list of users | User access; Customer (can only get their own user details) & Employee",
        "operationId" : "getUsers",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A JSON array of users",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "employees" ],
        "summary" : "creating a user",
        "description" : "creating a user | User access; Employee",
        "operationId" : "createUser",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Created a user"
          },
          "400" : {
            "description" : "Invalid request, user not created"
          }
        }
      }
    },
    "/users/{userid}" : {
      "get" : {
        "tags" : [ "employees", "customers" ],
        "summary" : "get a user using user ID",
        "description" : "get a specific user using an ID | User access; Customer (can only get their user details) & Employee",
        "operationId" : "getUser",
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "The userid of the user",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A json account object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "employees", "customers" ],
        "summary" : "update a user",
        "description" : "updating a user using a userid | User access; Customer(can only update their own user details) & Employee",
        "operationId" : "updateUser",
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "The userid for the user to update",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/User"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "user has been updated successfully"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "employees" ],
        "summary" : "delete a user",
        "description" : "deleting a user using the userid | User access; Employee",
        "operationId" : "deleteUser",
        "parameters" : [ {
          "name" : "userid",
          "in" : "path",
          "description" : "The userid for the user to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "user has been deleted successfully"
          }
        },
        "security" : [ {
          "bearerAuth" : [ ]
        } ]
      }
    },
    "/accounts" : {
      "get" : {
        "tags" : [ "employees", "customers" ],
        "summary" : "get accounts",
        "description" : "getting a list of accounts | User access; Customer (can only get their own account) & Employee",
        "operationId" : "getAccounts",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A JSON array of accounts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Account"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "bad input parameter"
          }
        }
      },
      "post" : {
        "tags" : [ "employees", "customers" ],
        "summary" : "create an account",
        "description" : "creating an account | User access; Customer & Employee",
        "operationId" : "createAccount",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Account created successfully"
          },
          "400" : {
            "description" : "Invalid request, account not created"
          }
        }
      }
    },
    "/accounts/{iban}" : {
      "get" : {
        "tags" : [ "employees", "customers" ],
        "summary" : "get an account using IBAN",
        "description" : "get a specific account using an IBAN | User access; Customer (can only get their own account) & Employee",
        "operationId" : "getAccount",
        "parameters" : [ {
          "name" : "iban",
          "in" : "path",
          "description" : "The the iban of the account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A json account object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Account"
                  }
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "employees", "customers" ],
        "summary" : "update an account",
        "description" : "updating an accouint using an iban | User access; Customer (can only update their own account) & Employee",
        "operationId" : "updateAccount",
        "parameters" : [ {
          "name" : "iban",
          "in" : "path",
          "description" : "The the iban of the account",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Account"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "account has been updated successfully"
          }
        }
      },
      "delete" : {
        "tags" : [ "employees" ],
        "summary" : "Close an account",
        "description" : "Closing an account using an iban | User access; Employee",
        "operationId" : "deleteAccount",
        "parameters" : [ {
          "name" : "iban",
          "in" : "path",
          "description" : "The iban account to delete",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Account has been delete successfully"
          }
        }
      }
    },
    "/transactions" : {
      "get" : {
        "tags" : [ "employees", "customers" ],
        "summary" : "List transactions",
        "description" : "getting a list of transactions",
        "operationId" : "getTransactions",
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "The number of items to skip before starting to collect the result set",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "The numbers of items to return",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A JSON array of transactions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Transaction"
                  }
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "employees", "customers" ],
        "summary" : "Create a transaction",
        "description" : "creating a transaction",
        "operationId" : "createTransaction",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Transaction"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Transaction created successfully"
          },
          "400" : {
            "description" : "Invalid request, transaction not created"
          }
        }
      }
    },
    "/transactions/{transactionId}" : {
      "get" : {
        "tags" : [ "employees", "customers" ],
        "summary" : "Get a specific transaction",
        "description" : "get a specific transaction | User access; Customer (can only get their own transactions) & Employee",
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "description" : "The transactionId of the transaction",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A json transaction object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Transaction"
                  }
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "employees" ],
        "summary" : "Update a transaction",
        "description" : "Update a single transaction via transactionId",
        "operationId" : "transactionId",
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "description" : "The transactionId of the transaction",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/body_1"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "successfully updated transaction"
          },
          "400" : {
            "description" : "Updating transaction failed"
          }
        }
      },
      "delete" : {
        "tags" : [ "employees" ],
        "summary" : "Delete a transaction",
        "description" : "Delete a single transaction via transactionId",
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "description" : "The transactionId of the transaction",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successfully deleted transaction"
          },
          "400" : {
            "description" : "deleting transaction failed"
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "Account" : {
        "required" : [ "accountType", "balance", "iban", "user" ],
        "type" : "object",
        "properties" : {
          "iban" : {
            "type" : "string",
            "format" : "uuid"
          },
          "user" : {
            "$ref" : "#/components/schemas/User"
          },
          "balance" : {
            "type" : "number"
          },
          "accountType" : {
            "$ref" : "#/components/schemas/AccountType"
          }
        }
      },
      "User" : {
        "required" : [ "account", "emailAddress", "firstName", "id", "lastName", "password", "phoneNumber", "role" ],
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "firstName" : {
            "type" : "string"
          },
          "lastName" : {
            "type" : "string"
          },
          "phoneNumber" : {
            "type" : "string"
          },
          "emailAddress" : {
            "type" : "string",
            "format" : "email"
          },
          "password" : {
            "type" : "string",
            "format" : "password"
          },
          "role" : {
            "$ref" : "#/components/schemas/Role"
          }
        }
      },
      "Transaction" : {
        "required" : [ "accountFrom", "accountTo", "amount", "id", "timestamp", "userPerforming" ],
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "accountFrom" : {
            "$ref" : "#/components/schemas/Account"
          },
          "accountTo" : {
            "$ref" : "#/components/schemas/Account"
          },
          "amount" : {
            "type" : "number"
          },
          "userPerforming" : {
            "$ref" : "#/components/schemas/User"
          },
          "timestamp" : {
            "type" : "string",
            "format" : "date-time"
          }
        }
      },
      "Role" : {
        "type" : "string",
        "enum" : [ "customer", "employee" ]
      },
      "AccountType" : {
        "type" : "string",
        "enum" : [ "current", "savings" ]
      },
      "body" : {
        "type" : "object",
        "properties" : {
          "email_address" : {
            "type" : "string"
          },
          "password" : {
            "type" : "string"
          }
        }
      },
      "inline_response_200" : {
        "type" : "object",
        "properties" : {
          "authtoken" : {
            "type" : "string",
            "example" : "xx508xx63817x752xx74004x30705xx92x58349x5x78f5xx34xxxxx51"
          }
        }
      },
      "body_1" : {
        "type" : "object",
        "properties" : {
          "amount_withdraw" : {
            "type" : "integer"
          },
          "account_type" : {
            "type" : "string"
          }
        }
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}